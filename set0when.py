import matplotlib.pyplot as plt
import numpy as np

# This is to maximize welfare for values of n between 0 and 1

def a1(n):
    return (-3.24e+63*n**5 + 3.456e+64*n**4 + 2.80439999999989e+63*n**3 - 6.590232e+65*n**2 + 5.73697800000001e+65*n + 2.460402e+66)/(1.80000000000001e+63*n**6 - 1.76400000000001e+64*n**5 - 5.15736000000003e+63*n**4 + 1.36406160000001e+65*n**3 - 1.122814728e+66*n**2 + 3.82629225600001e+66*n + 5.66871984e+66)
    
def a2(n):
    return (-5.4e+63*n**5 + 5.004e+64*n**4 + 5.88539999999999e+64*n**3 - 9.021984e+65*n**2 + 1.05049800000002e+65*n + 2.460402e+66)/(1.80000000000001e+63*n**6 - 1.76400000000001e+64*n**5 - 5.15736000000003e+63*n**4 + 1.36406160000001e+65*n**3 - 1.122814728e+66*n**2 + 3.82629225600001e+66*n + 5.66871984e+66)
    
def b1(n):
    return (-4.60800000000001e+50*n**5 + 4.32000000000001e+51*n**4 + 5.82432e+51*n**3 - 7.35470400000001e+52*n**2 + 6.18312000000002e+52*n + 1.71119999999998e+52)/(1.44e+50*n**6 - 1.4112e+51*n**5 - 4.12588800000002e+50*n**4 + 1.09124928e+52*n**3 - 8.98251782400002e+52*n**2 + 3.0610338048e+53*n + 4.534975872e+53)
    
def b2(n):
    return (-2.304e+50*n**5 + 2.448e+51*n**4 + 5.72159999999998e+50*n**3 - 4.333872e+52*n**2 + 6.86760000000001e+52*n + 1.71119999999998e+52)/(1.44e+50*n**6 - 1.4112e+51*n**5 - 4.12588800000002e+50*n**4 + 1.09124928e+52*n**3 - 8.98251782400002e+52*n**2 + 3.0610338048e+53*n + 4.534975872e+53)
    
def b3(n):
    return (4.10636678200691e+48*n**6 - 3.40743944636678e+49*n**5 + 1.43999999999998e+64*n**4 - 1.16999999999999e+65*n**3 - 3.28259999999998e+65*n**2 + 1.88801999999999e+66*n + 4.27799999999995e+65)/(3.60000000000001e+63*n**6 - 3.52800000000001e+64*n**5 - 1.03147200000001e+64*n**4 + 2.72812320000001e+65*n**3 - 2.24562945600001e+66*n**2 + 7.65258451200001e+66*n + 1.133743968e+67)
    
def c1(n):
    return (-3.59999999999998e+62*n**5 + 1.224e+64*n**4 + 5.51124e+64*n**3 - 7.171452e+65*n**2 + 6.61141800000001e+65*n + 2.460402e+66)/(1.80000000000001e+63*n**6 - 1.76400000000001e+64*n**5 - 5.15736000000003e+63*n**4 + 1.36406160000001e+65*n**3 - 1.122814728e+66*n**2 + 3.82629225600001e+66*n + 5.66871984e+66)
    
def c2(n):
    return (5.392214532872e+47*n**6 - 6.06737024221456e+48*n**5 + 1.26e+63*n**4 - 3.843e+64*n**3 - 3.27398400000001e+65*n**2 + 1.3641138e+66*n + 2.460402e+66)/(1.80000000000001e+63*n**6 - 1.76400000000001e+64*n**5 - 5.15736000000003e+63*n**4 + 1.36406160000001e+65*n**3 - 1.122814728e+66*n**2 + 3.82629225600001e+66*n + 5.66871984e+66)
    
    
def maximize_function():
    max_value = float('-inf')  #max value starts at negative infinity
    optimal_n = None
    function_vals = []  # list to store function values for all n used

    
    for i in range(101):  # loop from 0 to 100 with step of 1
        n = i / 100  # convert i to n in the range 0 to 1
        a1_val = a1(n)
        a2_val = a2(n)
        b1_val = b1(n)
        b2_val = b2(n)
        b3_val = b3(n)
        c1_val = c1(n)
        c2_val = c2(n)
        
        if a1(n) < 0:
            a1_val = 0  # set a1 to 0 if it's negative
        
        if a2(n) < 0:
            a2_val = 0  # set a2 to 0 if it's negative
        
        if b1(n) < 0:
            b1_val = 0  # set b1 to 0 if it's negative
        
        if b2(n) < 0:
            b2_val = 0  # set b2 to 0 if it's negative
        
        if b3(n) < 0:
            b3_val = 0  # set b3 to 0 if it's negative
        
        if c1(n) < 0:
            c1_val = 0 # set c1 to 0 if it's negative
        
        if c2(n) < 0:
            c2_val = 0 # set c2 to 0 if it's negative
        
        print("n:", n, "a1:", a1_val, "a2:", a2_val, "b1:", b1_val, "b2:", b2_val, "b3:", b3_val, "c1:", c1_val, "c2:", c2_val) # Print intermediate values
        
        # compute value of the function for current n



        function_val=10*(-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118) - ((-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118)**2)/2 - 0.8*((-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118)*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059)) - ((-0.176470588235294*(a1_val)*n - 0.38235294117647*(a1_val) - 0.294117647058823*(a2_val)*n - 0.38235294117647*(a2_val) - 0.264705882352941*(b1_val)*n - 0.294117647058823*(b1_val) - 0.38235294117647*(b2_val)*n - 0.294117647058823*(b2_val) - 0.294117647058823*(b3_val) - 0.676470588235294*(c1_val)*n + 0.11764705882353*(c1_val) + 0.11764705882353*(c2_val) + 7.20588235294117)*(-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118))         + 10*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059) - ((0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059)**2)/2 - 0.8*((0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059)*(-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118)) - 0.8*((0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059)*(0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118)) - ((-0.558823529411765*(a1_val)*n - 0.294117647058822*(a1_val) - 0.264705882352941*(a2_val)*n - 0.294117647058822*(a2_val) - 0.588235294117647*(b1_val)*n - 0.264705882352941*(b1_val) - 0.294117647058822*(b2_val)*n - 0.264705882352941*(b2_val) - 0.264705882352941*(b3_val) - 0.558823529411765*(c1_val)*n - 0.294117647058822*(c1_val) - 0.294117647058822*(c2_val) + 5.73529411764705)*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059))         + 10*(0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118) - ((0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118)**2)/2 - 0.8*((0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118)*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059)) - ((-0.676470588235294*(a1_val)*n + 0.11764705882353*(a1_val) - 0.294117647058823*(a2_val)*n + 0.11764705882353*(a2_val) - 0.264705882352941*(b1_val)*n - 0.294117647058823*(b1_val) + 0.11764705882353*(b2_val)*n - 0.294117647058823*(b2_val) - 0.294117647058823*(b3_val) - 0.176470588235294*(c1_val)*n - 0.38235294117647*(c1_val) - 0.38235294117647*(c2_val) + 7.20588235294117)*(0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118)) + (-0.176470588235294*(a1_val)*n - 0.38235294117647*(a1_val) - 0.294117647058823*(a2_val)*n - 0.38235294117647*(a2_val) - 0.264705882352941*(b1_val)*n - 0.294117647058823*(b1_val) - 0.38235294117647*(b2_val)*n - 0.294117647058823*(b2_val) - 0.294117647058823*(b3_val) - 0.676470588235294*(c1_val)*n + 0.11764705882353*(c1_val) + 0.11764705882353*(c2_val) + 7.20588235294117)*(-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118) - (5 - ((a1_val)) - ((a2_val)) - ((n)*((b1_val))) - ((n)*((b2_val))) - ((n)*((c1_val))))*(-0.176470588235294*(a1_val)*n + 0.617647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.617647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.617647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) + 0.323529411764706*(c1_val)*n + 0.117647058823529*(c1_val) + 0.117647058823529*(c2_val) + 2.20588235294118) - 4*(a1_val)**2 - 4*(a2_val)**2 + (-0.558823529411765*(a1_val)*n - 0.294117647058822*(a1_val) - 0.264705882352941*(a2_val)*n - 0.294117647058822*(a2_val) - 0.588235294117647*(b1_val)*n - 0.264705882352941*(b1_val) - 0.294117647058822*(b2_val)*n - 0.264705882352941*(b2_val) - 0.264705882352941*(b3_val) - 0.558823529411765*(c1_val)*n - 0.294117647058822*(c1_val) - 0.294117647058822*(c2_val) + 5.73529411764705)*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059) - (5 - ((b1_val)) - ((b2_val)) - ((b3_val)) - ((n)*((a1_val))) - ((n)*((a2_val))) - ((n)*((c1_val))))*(0.441176470588235*(a1_val)*n - 0.294117647058824*(a1_val) + 0.735294117647059*(a2_val)*n - 0.294117647058824*(a2_val) - 0.588235294117647*(b1_val)*n + 0.735294117647059*(b1_val) - 0.294117647058824*(b2_val)*n + 0.735294117647059*(b2_val) + 0.735294117647059*(b3_val) + 0.441176470588235*(c1_val)*n - 0.294117647058824*(c1_val) - 0.294117647058824*(c2_val) + 0.735294117647059) - 6*(b1_val)**2 - 6*(b2_val)**2 - 6*(b3_val)**2 + (-0.676470588235294*(a1_val)*n + 0.11764705882353*(a1_val) - 0.294117647058823*(a2_val)*n + 0.11764705882353*(a2_val) - 0.264705882352941*(b1_val)*n - 0.294117647058823*(b1_val) + 0.11764705882353*(b2_val)*n - 0.294117647058823*(b2_val) - 0.294117647058823*(b3_val) - 0.176470588235294*(c1_val)*n - 0.38235294117647*(c1_val) - 0.38235294117647*(c2_val) + 7.20588235294117)*(0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118) - (5 - ((c1_val)) - ((c2_val)) - ((n)*((b1_val))) - ((n)*((a1_val))))*(0.323529411764706*(a1_val)*n + 0.117647058823529*(a1_val) - 0.294117647058824*(a2_val)*n + 0.117647058823529*(a2_val) + 0.735294117647059*(b1_val)*n - 0.294117647058824*(b1_val) + 0.117647058823529*(b2_val)*n - 0.294117647058824*(b2_val) - 0.294117647058824*(b3_val) - 0.176470588235294*(c1_val)*n + 0.617647058823529*(c1_val) + 0.617647058823529*(c2_val) + 2.20588235294118) - 4*(c1_val)**2 - 4*(c2_val)**2





        function_vals.append(function_val) # append function value to list
        print("function_val",function_val)        
        if function_val > max_value:
            max_value = function_val # if max update maximum value
            optimal_n = n
    
    print("Optimal n:", optimal_n)
    print("Maximum function value:", max_value)


    plt.plot(np.arange(0, 1.01, 0.01), function_vals)
    plt.xlabel('n')
    plt.ylabel('Welfare')
    plt.title('Network D| b=0.8')
    plt.grid(True)
    plt.show()

maximize_function()