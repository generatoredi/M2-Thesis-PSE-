import matplotlib.pyplot as plt
import numpy as np

# This is to maximize welfare for values of n between 0 and 1

def a(n):
    return (-1.73745e+20*n**5 - 1.69008e+36*n**4 + 1.9435668e+38*n**3 - 6.7329024e+38*n**2 - 4.51356947999999e+39*n + 1.002370992e+40)/(6.76032000000001e+35*n**5 - 2.12772e+37*n**4 + 2.1470232e+38*n**3 - 2.023082712e+39*n**2 + 7.69779175199999e+39*n + 8.16806880959999e+40)
    
def b(n):
    return (-3.38016e+36*n**4 + 1.0807608e+38*n**3 - 1.20483468e+39*n**2 - 1.99982580000001e+39*n + 1.539967632e+40)/(6.76032000000001e+35*n**5 - 2.12772e+37*n**4 + 2.1470232e+38*n**3 - 2.023082712e+39*n**2 + 7.69779175199999e+39*n + 8.16806880959999e+40)
    
def c(n):
    return (1.73745e+20*n**5 - 1.69008e+36*n**4 - 8.45905200000001e+37*n**3 - 2.50988639999999e+38*n**2 + 6.16745052e+39*n + 2.367589392e+40)/(6.76032000000001e+35*n**5 - 2.12772e+37*n**4 + 2.1470232e+38*n**3 - 2.023082712e+39*n**2 + 7.69779175199999e+39*n + 8.16806880959999e+40)
    
    
def maximize_function():
    max_value = float('-inf')  #max value starts at negative infinity
    optimal_n = None
    function_vals = []  # list to store function values for all n used

    
    for i in range(101):  # loop from 0 to 100 with step of 1
        n = i / 100  # convert i to n in the range 0 to 1
        a_val = a(n)
        b_val = b(n)
        c_val = c(n)
        
        if a(n) < 0:
            a_val = 0  # set a1 to 0 if it's negative
        
        if b(n) < 0:
            b_val = 0  # set a2 to 0 if it's negative
        
        if c(n) < 0:
            c_val = 0  # set b1 to 0 if it's negative
        
        print("n:", n, "a:", a_val, "b:", b_val, "c:", c_val,) # Print intermediate values
        
        # compute value of the function for current n

        function_val=10*(-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143) - ((-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)**2)/2 - 0.8*((-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)*(0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714)) - 0.8*((-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714)) - ((-0.314285714285714*(a_val)*n - 0.342857142857142*(a_val) - 0.657142857142858*(b_val)*n - 0.314285714285714*(b_val) - 0.314285714285714*(c_val)*n - 0.314285714285714*(c_val) + 5.14285714285715)*(-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143))   + 10*(0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714) - ((0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714)**2)/2 - 0.8*((0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714)*(-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)) - ((-0.421428571428572*(a_val)*n - 0.314285714285714*(a_val) - 0.235714285714286*(b_val)*n - 0.421428571428572*(b_val) - 0.421428571428572*(c_val)*n + 0.0785714285714287*(c_val) + 6.71428571428572)*(0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714))   + 10*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714) - ((0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714)**2)/2 - 0.8*((-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714)) - ((0.0785714285714287*(a_val)*n - 0.314285714285714*(a_val) - 0.735714285714286*(b_val)*n + 0.0785714285714287*(b_val) + 0.0785714285714287*(c_val)*n - 0.421428571428572*(c_val) + 6.71428571428572)*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714)) + (-0.314285714285714*(a_val)*n - 0.342857142857142*(a_val) - 0.657142857142858*(b_val)*n - 0.314285714285714*(b_val) - 0.314285714285714*(c_val)*n - 0.314285714285714*(c_val) + 5.14285714285715)*(-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143)  - (5 - ((a_val)) - ((n)*((b_val))))*(-0.142857142857143*(a_val)*n + 0.571428571428571*(a_val) + 0.428571428571429*(b_val)*n - 0.142857142857143*(b_val) - 0.142857142857143*(c_val)*n - 0.142857142857143*(c_val) + 1.42857142857143) - 4*(a_val)**2 + (-0.421428571428572*(a_val)*n - 0.314285714285714*(a_val) - 0.235714285714286*(b_val)*n - 0.421428571428572*(b_val) - 0.421428571428572*(c_val)*n + 0.0785714285714287*(c_val) + 6.71428571428572)*(0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714) - (5 - ((b_val)) - ((n)*((a_val))) - ((n)*((c_val))))*(0.535714285714286*(a_val)*n - 0.142857142857143*(a_val) - 0.107142857142857*(b_val)*n + 0.535714285714286*(b_val) + 0.535714285714286*(c_val)*n + 0.0357142857142857*(c_val) + 2.14285714285714) - 6*(b_val)**2 + (0.0785714285714287*(a_val)*n - 0.314285714285714*(a_val) - 0.735714285714286*(b_val)*n + 0.0785714285714287*(b_val) + 0.0785714285714287*(c_val)*n - 0.421428571428572*(c_val) + 6.71428571428572)*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714) - (5 - ((c_val)) - ((n)*((b_val))))*(0.0357142857142857*(a_val)*n - 0.142857142857143*(a_val) + 0.392857142857143*(b_val)*n + 0.0357142857142857*(b_val) + 0.0357142857142857*(c_val)*n + 0.535714285714286*(c_val) + 2.14285714285714) - 4*(c_val)**2




        function_vals.append(function_val) # append function value to list
        print("function_val",function_val)        
        if function_val > max_value:
            max_value = function_val # if max update maximum value
            optimal_n = n
    
    print("Optimal n:", optimal_n)
    print("Maximum function value:", max_value)


    plt.plot(np.arange(0, 1.01, 0.01), function_vals)
    plt.xlabel('n')
    plt.ylabel('Welfare')
    plt.title('Network E| b=0.8')
    plt.grid(True)
    plt.show()

maximize_function()