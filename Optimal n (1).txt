# [\alpha=10, b_{a,b}=b_{a,c}=b_b,c=0.5, c=5 (and the rest of parameters phi), \phi_{1,1}=\phi_{3,3}=2, \phi_{2,2}=3]

#NETWORK A $(\phi_{1,2}=2, \phi_{1,3}=1, \phi_{2,3}=1)$   (z1=a, z2=b, z3=c) (q1=x, q2=y, q3=z)
#b=0.5


Profit1= ((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)*(-0.373809523809524*a*n - 0.876190476190476*a - 1.01904761904762*b*n - 0.314285714285714*b - 0.542857142857143*c*n - 0.285714285714286*c + 6.07619047619048) - (5 - 2*a - 2*n*b - n*c)*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420) - 4*a**2


Profit2= 
((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)*(-1.08690476190476*a*n - 0.195238095238095*a - 0.373809523809524*b*n - 1.29285714285714*b - 0.528571428571429*c*n - 0.357142857142857*c + 5.47738095238095) - (5 - 3*b - 2*n*a - n*c)*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420) - 6*b**2


Profit3= 
((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)*(-0.820238095238095*a*n - 0.214285714285714*a - 0.678571428571429*b*n - 0.321428571428571*b - 0.214285714285714*c*n - 0.928571428571428*c + 6.23214285714286) - (5- 2*c -n*b - n*a)*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420 ) - 4*c**2



PROFITALL= 
((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*(-0.373809523809524*(a_val)*n - 0.876190476190476*(a_val) - 1.01904761904762*(b_val)*n - 0.314285714285714*(b_val) - 0.542857142857143*(c_val)*n - 0.285714285714286*(c_val) + 6.07619047619048) - (5 - 2*(a_val) - 2*n*(b_val) - n*(c_val))*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) - 4*(a_val)**2 + ((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*(-1.08690476190476*(a_val)*n - 0.195238095238095*(a_val) - 0.373809523809524*(b_val)*n - 1.29285714285714*(b_val) - 0.528571428571429*(c_val)*n - 0.357142857142857*(c_val) + 5.47738095238095) - (5 - 3*(b_val) - 2*n*(a_val) - n*(c_val))*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) - 6*(b_val)**2 + ((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*(-0.820238095238095*(a_val)*n - 0.214285714285714*(a_val) - 0.678571428571429*(b_val)*n - 0.321428571428571*(b_val) - 0.214285714285714*(c_val)*n - 0.928571428571428*(c_val) + 6.23214285714286) - (5- 2*(c_val) -n*(b_val) - n*(a_val))*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420 ) - 4*(c_val)**2



# U = α*sum_i qi − sum_i (qi^2/2) - sumj̸=i (b_val)ij*qi*qj − sum pi*qi    (alpha=10)  Consumer Surplus:
#10*q1 - (q1^2)/2 - 0.5*(q1*q2) - 0.5*(q1*q3) - p1*q1         +
#10*q2 - (q2^2)/2 - 0.5*(q2*q1) - 0.5*(q2*q3) - p2*q2         +
#10*q3 - (q3^2)/2 - 0.5*(q3*q1) - 0.5*(q3*q2) - p3*q3         = Total Utility
#remem(b_val)er to modify quantity and expression for python syntax



Consumer surplus=
10*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) - (((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)**2)/2 - 0.5*(((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)) - 0.5*(((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)) - (-0.373809523809524*(a_val)*n - 0.876190476190476*(a_val) - 1.01904761904762*(b_val)*n - 0.314285714285714*(b_val) - 0.542857142857143*(c_val)*n - 0.285714285714286*(c_val) + 6.07619047619048)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) + 10*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) - (((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)**2)/2 - 0.5*(((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)) - 0.5*(((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)) - (-1.08690476190476*(a_val)*n - 0.195238095238095*(a_val) - 0.373809523809524*(b_val)*n - 1.29285714285714*(b_val) - 0.528571428571429*(c_val)*n - 0.357142857142857*(c_val) + 5.47738095238095)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) + 10*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420) - (((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)**2)/2 - 0.5*(((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)) - 0.5*(((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)) - (-0.820238095238095*(a_val)*n - 0.214285714285714*(a_val) - 0.678571428571429*(b_val)*n - 0.321428571428571*(b_val) - 0.214285714285714*(c_val)*n - 0.928571428571428*(c_val) + 6.23214285714286)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)




Welfare=
10*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420) - (((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)**2)/2 - 0.5*(((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)) - 0.5*(((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)) - (-0.373809523809524*a*n - 0.876190476190476*a - 1.01904761904762*b*n - 0.314285714285714*b - 0.542857142857143*c*n - 0.285714285714286*c + 6.07619047619048)*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420) + 10*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420) - (((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)**2)/2 - 0.5*(((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)) - 0.5*(((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)) - (-1.08690476190476*a*n - 0.195238095238095*a - 0.373809523809524*b*n - 1.29285714285714*b - 0.528571428571429*c*n - 0.357142857142857*c + 5.47738095238095)*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420) + 10*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420) - (((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)**2)/2 - 0.5*(((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)) - 0.5*(((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)) - (-0.820238095238095*a*n - 0.214285714285714*a - 0.678571428571429*b*n - 0.321428571428571*b - 0.214285714285714*c*n - 0.928571428571428*c + 6.23214285714286)*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420) + ((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420)*(-0.373809523809524*a*n - 0.876190476190476*a - 1.01904761904762*b*n - 0.314285714285714*b - 0.542857142857143*c*n - 0.285714285714286*c + 6.07619047619048) - (5 - 2*a - 2*n*b - n*c)*((731 + a*(466 - 165*n) + b*(421*n - 141) + c*(186*n - 90))/420) - 4*a**2 + ((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420)*(-1.08690476190476*a*n - 0.195238095238095*a - 0.373809523809524*b*n - 1.29285714285714*b - 0.528571428571429*c*n - 0.357142857142857*c + 5.47738095238095) - (5 - 3*b - 2*n*a - n*c)*((1234 - a*(106 -434*n) + b*(681 - 121*n) + 6*c*(29*n -5))/420) - 6*b**2 + ((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420)*(-0.820238095238095*a*n - 0.214285714285714*a - 0.678571428571429*b*n - 0.321428571428571*b - 0.214285714285714*c*n - 0.928571428571428*c + 6.23214285714286) - (5- 2*c -n*b - n*a)*((600 + a*(210*n - 90) +b*(135*n - 135) + c*(450 - 90*n))/420 ) - 4*c**2





Welfare (for python)=
10*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) - (((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)**2)/2 - 0.5*(((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)) - 0.5*(((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)) - (-0.373809523809524*(a_val)*n - 0.876190476190476*(a_val) - 1.01904761904762*(b_val)*n - 0.314285714285714*(b_val) - 0.542857142857143*(c_val)*n - 0.285714285714286*(c_val) + 6.07619047619048)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) + 10*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) - (((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)**2)/2 - 0.5*(((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)) - 0.5*(((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)) - (-1.08690476190476*(a_val)*n - 0.195238095238095*(a_val) - 0.373809523809524*(b_val)*n - 1.29285714285714*(b_val) - 0.528571428571429*(c_val)*n - 0.357142857142857*(c_val) + 5.47738095238095)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) + 10*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420) - (((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)**2)/2 - 0.5*(((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)) - 0.5*(((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)) - (-0.820238095238095*(a_val)*n - 0.214285714285714*(a_val) - 0.678571428571429*(b_val)*n - 0.321428571428571*(b_val) - 0.214285714285714*(c_val)*n - 0.928571428571428*(c_val) + 6.23214285714286)*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420) + ((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420)*(-0.373809523809524*(a_val)*n - 0.876190476190476*(a_val) - 1.01904761904762*(b_val)*n - 0.314285714285714*(b_val) - 0.542857142857143*(c_val)*n - 0.285714285714286*(c_val) + 6.07619047619048) - (5 - 2*(a_val) - 2*n*(b_val) - n*(c_val))*((731 + (a_val)*(466 - 165*n) + (b_val)*(421*n - 141) + (c_val)*(186*n - 90))/420) - 4*(a_val)**2 + ((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420)*(-1.08690476190476*(a_val)*n - 0.195238095238095*(a_val) - 0.373809523809524*(b_val)*n - 1.29285714285714*(b_val) - 0.528571428571429*(c_val)*n - 0.357142857142857*(c_val) + 5.47738095238095) - (5 - 3*(b_val) - 2*n*(a_val) - n*(c_val))*((1234 - (a_val)*(106 -434*n) + (b_val)*(681 - 121*n) + 6*(c_val)*(29*n -5))/420) - 6*(b_val)**2 + ((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420)*(-0.820238095238095*(a_val)*n - 0.214285714285714*(a_val) - 0.678571428571429*(b_val)*n - 0.321428571428571*(b_val) - 0.214285714285714*(c_val)*n - 0.928571428571428*(c_val) + 6.23214285714286) - (5- 2*(c_val) -n*(b_val) - n*(a_val))*((600 + (a_val)*(210*n - 90) +(b_val)*(135*n - 135) + (c_val)*(450 - 90*n))/420 ) - 4*(c_val)**2



Optimal n: 1.0
Maximum function value: 25.154551300045906





